name: Deploy to AWS EC2 using Docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DEV_DOCKER_IMAGE_NAME }}
  DOCKER_IMAGE_TAG: latest
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_SSH_USER: ec2-user
  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  CONTAINER_NAME: ${{ secrets.DEV_CONTAINER_NAME }}
  APP_PORT: "8089"

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

		- name: Gradle permissions
        run: chmod +x ./gradlew

    - name: Set up application-prod.yml
      run: |
          mkdir -p ./src/main/resources
          printf "%s" "${{ secrets.DEV_APPLICATION }}" > ./src/main/resources/application-prod.yml

    - name: Build with Gradle
      run: ./gradlew build

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Login to Docker Hub using Access Token
      run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push the Docker image
      run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest


  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_SSH_USER }}
        key: ${{ env.PRIVATE_KEY }}
        script: |
          set -e
            IMAGE="${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}"
            NAME="${{ env.CONTAINER_NAME }}"
            PORT="${{ env.APP_PORT }}"

            # 기존 컨테이너 정리 (이름 기준)
            if [ "$(sudo docker ps -aq -f name=^${NAME}$)" ]; then
              sudo docker stop "${NAME}" || true
              sudo docker rm "${NAME}" || true
            fi

            # 이미지 pull (태그 포함)
            sudo docker pull "${IMAGE}"

            # 컨테이너 실행
            sudo docker run -d \
              --name "${NAME}" \
              --restart unless-stopped \
              -p ${PORT}:${PORT} \
              -e TZ=Asia/Seoul \
              -e SPRING_PROFILES_ACTIVE=prod \
              "${IMAGE}"

            # dangling 이미지 정리
            sudo docker image prune -f
